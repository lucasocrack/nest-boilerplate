generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique @db.VarChar(80)
  username    String    @unique @db.VarChar(255)
  cpfCnpj     String?   @db.VarChar(14)
  password    String    @db.VarChar(128)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isActive    Boolean   @default(false)
  activatedAt DateTime?
  termsIp     String?   @db.VarChar(45)
  terms       Boolean   @default(false)
  role        Role      @default(CLIENT)
  personId    Int?      @unique
  person      Person?   @relation(fields: [personId], references: [id])

  @@map("user")
}

enum Role {
  CLIENT
  ADMIN
  EMPLOYEE
  FINANCIAL
  SALESPERSON
  TECHNICIAN
  SOCIALMEDIA
  SUPERVISOR
  SUPERADMIN
}

model Person {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(80)
  fantasyName String?    @db.VarChar(80)
  type        PersonType
  cpfCnpj     String?    @db.VarChar(14)
  cpfIe       String?    @db.VarChar(9)
  email       String?    @db.VarChar(40)
  phone1      String?    @db.VarChar(12)
  phone2      String?    @db.VarChar(12)
  birthDate   DateTime?
  notes       String?
  defaulter   Boolean    @default(false)
  photo       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  user        User?
  addresses   Address[]

  @@map("person")
}

enum PersonType {
  INDIVIDUAL
  COMPANY
  RURAL_PRODUCER
}

model Address {
  id           Int       @id @default(autoincrement())
  place        String    @db.VarChar(140)
  number       String    @db.VarChar(10)
  complement   String    @db.VarChar(50)
  neighborhood String    @db.VarChar(60)
  city         String    @db.VarChar(60)
  state        String    @db.VarChar(2)
  zipCode      String    @db.VarChar(10)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  personId     Int
  person       Person    @relation(fields: [personId], references: [id])

  @@map("address")
}

model Config {
  id           Int                 @id @default(autoincrement())
  name         String              @db.VarChar(120)
  email        String              @db.VarChar(60)
  mobile       String              @db.VarChar(20)
  phone1       String?             @db.VarChar(20)
  phone2       String?             @db.VarChar(20)
  place        String              @db.VarChar(150)
  number       String              @db.VarChar(10)
  complement   String?             @db.VarChar(50)
  neighborhood String              @db.VarChar(80)
  city         String              @db.VarChar(60)
  state        String              @db.VarChar(2)
  zipCode      String              @db.VarChar(10)
  workingHours ConfigWorkingHour[]

  @@map("config")
}

model ConfigWorkingHour {
  id         Int       @id @default(autoincrement())
  day        Weekday
  open       DateTime
  close      DateTime
  lunchStart DateTime?
  lunchEnd   DateTime?
  configId   Int
  config     Config    @relation(fields: [configId], references: [id])

  @@map("config_working_hours")
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
